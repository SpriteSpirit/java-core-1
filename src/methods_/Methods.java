package methods_;

import java.time.LocalDate;
import java.util.Arrays;

public class Methods {

    public static void task1(int year) {
        /*
        Реализуйте метод, который получает в качестве параметра год, а затем проверяет,
        является ли он високосным, и выводит результат в консоль.

        *Эту проверку вы уже реализовывали в задании по условным операторам.*
        Теперь проверку нужно обернуть в метод и использовать год, который приходит в виде параметра.
        Результат программы выведите в консоль. Если год високосный, то должно быть выведено
        “*номер года —* високосный год”. Если год не високосный, то, соответственно:
        “*номер года —* не **високосный год”.
         */

        checkLeapYear(year);

    }

    public static void checkLeapYear(int year) {
        if (year % 4 == 0 && year % 100 != 0 || year % 400 == 0) {
            System.out.println(year + " - високосный год");
        } else {
            System.out.println(year + " - не високосный год");
        }
    }

    public static void task2(int deviceYear, int os) {
        /*
        ### Задание 2.
        Вспомним задание 2 по условным операторам, где нам необходимо было предложить пользователю облегченную версию
        приложения.
        - Текст прошлого задания
        К нам пришли коллеги и сообщили, что нам нужно знать не только операционную систему телефона, но и год его
        создания: от этого зависит, подойдет ли приложение для телефона или оно просто не установится.
        Если телефон произведен с 2015 по нынешний год, то приложение будет работать корректно.
        Если телефон произведен ранее 2015 года, то клиенту нужно посоветовать установить облегченную версию приложения.
        Ваша задача: написать программу, которая выдает соответствующее сообщение клиенту при наличии двух условий
        — операционной системы телефона (iOS или Android) и года производства.
        Если год выпуска ранее 2015 года, то к сообщению об установке нужно добавить информацию об облегченной версии.
        Например, для iOS оно будет звучать так:
        «Установите облегченную версию приложения для iOS по ссылке».
        А для Android так:
        «Установите облегченную версию приложения для Android по ссылке».
        При этом для пользователей с телефоном с 2015 года выпуска нужно вывести обычное предложение об установке
        приложения
        Для обозначения года создания используйте переменную clientDeviceYear, где необходимо указать 2015 год.
        **Важно**: вложенность больше двух этажей не допускается (условный оператор внутри условного оператора).
        Напишите метод, куда подаются два параметра: тип операционной системы (ОС) (0 — iOS или 1 — Android)
        и год выпуска устройства.
        Если устройство старше текущего года, предложите ему установить lite-версию (облегченную версию).
        Текущий год можно получить таким способом:
        ```java
        int currentYear = LocalDate.now().getYear();
        ```
        Или самим задать значение вручную, введя в переменную числовое значение.
        В результате программа должна выводить в консоль в зависимости от исходных данных, какую версию приложения
        (обычную или lite) и для какой ОС (Android или iOS) нужно установить пользователю.
         */

        checkOS(deviceYear, os);
    }

    public static void checkOS(int deviceYear, int os) {
        int currentYear = LocalDate.now().getYear();

        if (deviceYear < currentYear) {
            if (os == 0) {
                System.out.println("Установите облегченную версию приложения для iOS по ссылке");
            } else {
                System.out.println("Установите облегченную версию приложения для Android по ссылке");
            }
        } else {
            if (os == 0) {
                System.out.println("Обычная версия приложения для iOS");
            } else {
                System.out.println("Обычная версия приложения для Android");
            }
        }
    }

    public static void changeValue(int value) {
        value = 22;
        System.out.println("Значение в методе: " + value);
    }

    public static void changeValue2(Integer value) {
        value = 22;
        System.out.println("Значение в методе: " + value);
    }

    public static void changeValue3(Integer[] value) {
        value = new Integer[]{1, 2};
        System.out.println("Значение в методе: " + Arrays.toString(value));
    }

    public static void changeValue4(Integer[] value) {
        value[0] = 99;
        System.out.println("Значение в методе: " + Arrays.toString(value));
    }
}
